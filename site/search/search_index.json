{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>example_mkdocstrings_lib<ul> <li>MyClass</li> <li>projects<ul> <li>foo</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/example_mkdocstrings_lib/","title":"example_mkdocstrings_lib","text":"<p>Without section-index plugin, init is a separate entry in the nav bar.</p> <p>With the plugin it just becomes the index/landing page for the library.</p> <p>TEST! I'M DIFFERENT. I'm different again. Use mkdocs serve --watch src/ for live changes. Test!</p> <p>After adding a new file/directory (e.g. projects, projects/init.py, projects/foo.py),</p> <ul> <li>mkdocs build</li> <li>mkdocs serve</li> </ul>"},{"location":"reference/example_mkdocstrings_lib/#example_mkdocstrings_lib--testing-mkdown","title":"Testing MkDown","text":""},{"location":"reference/example_mkdocstrings_lib/MyClass/","title":"MyClass","text":""},{"location":"reference/example_mkdocstrings_lib/MyClass/#example_mkdocstrings_lib.MyClass.MyClass","title":"<code>MyClass</code>","text":"<p>Lorem ipsum</p> Source code in <code>src/example_mkdocstrings_lib/MyClass.py</code> <pre><code>class MyClass:\n    \"\"\"\n    Lorem ipsum\n    \"\"\"\n\n    def __init__(self, foo: str) -&gt; None:\n        self.foo: str = foo\n\n    @override\n    def __str__(self) -&gt; str:\n        return self.foo\n</code></pre>"},{"location":"reference/example_mkdocstrings_lib/projects/","title":"projects","text":""},{"location":"reference/example_mkdocstrings_lib/projects/foo/","title":"foo","text":""},{"location":"reference/example_mkdocstrings_lib/projects/foo/#example_mkdocstrings_lib.projects.foo.interject_with_foo","title":"<code>interject_with_foo(*words)</code>","text":"<p>Changed to escape with <code>pycon</code>.</p> <ul> <li>Pygments syntax highlighting isn't working (yet)</li> <li>It now works by adding - pymdownx.superfences to the mkdocs.yaml</li> <li>Add pymdownx.tilde for tilde strikethrough</li> </ul> <pre><code>&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.seed(80085)\n&gt;&gt;&gt; for word in interject_with_foo(\"Hello\", \"world\", \"\"):\n...     print(word)\nHell-FOO!...o\nw-FOO!...orld\n...foo?\n</code></pre> Source code in <code>src/example_mkdocstrings_lib/projects/foo.py</code> <pre><code>def interject_with_foo(*words: str) -&gt; Generator[str, str, None]:\n    \"\"\"\n    Changed to escape with `pycon`.\n\n    * ~~Pygments syntax highlighting isn't working (yet)~~\n    * It now works by adding - pymdownx.superfences to the mkdocs.yaml\n    * Add pymdownx.tilde for tilde strikethrough\n\n    ```pycon\n    &gt;&gt;&gt; import random\n    &gt;&gt;&gt; random.seed(80085)\n    &gt;&gt;&gt; for word in interject_with_foo(\"Hello\", \"world\", \"\"):\n    ...     print(word)\n    Hell-FOO!...o\n    w-FOO!...orld\n    ...foo?\n\n    ```\n    \"\"\"\n    for word in words:\n        if len(word) == 0:\n            yield \"...foo?\"\n        else:\n            idx = randint(0, len(word) - 1)\n            yield word[:idx] + \"-FOO!...\" + word[idx:]\n</code></pre>"}]}