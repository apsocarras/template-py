## .justfile for managing python dev tasks
# Inspired by this informative article: https://lukasatkinson.de/2025/just-dont-tox/

## Globals/env 
set dotenv-load := true
dotenv-filename := "_local/.env"

PYTHON_RUNTIME := `echo python$(cat .python-version)`
REPO := `basename "$PWD" | tr ' ' '_'`
VENDOR_DIR := "libs/"
DEPRECATED := "deprecated/"

{% if cookiecutter.ff_type != "none" -%}
SERVICE_ACCOUNT := "scheduler-invoker@{%raw%}$GCP_PROJECT_ID{%endraw%}.iam.gserviceaccount.com"
JOB_NAME := "{%raw%}{{REPO}}{%endraw%}-job"
CRON_SCHEDULE := "0 9 * * *"

{# 
#   # This doesn't work -- variables declared in the same scope level cannot reference each other 
#   # in justfiles. Have to make this a recipe.
    FUNCTION_URI := `gcloud functions describe {%raw%}{{REPO}}{%endraw%}`
#}

TRIGGER_METHOD := "{{cookiecutter.cloud_scheduler_method}}"
{%- endif %}

## Commands 
set shell := ['uv', 'run', 'bash', '-euxo', 'pipefail', '-c']
set positional-arguments 

qa *args: lint types deps (test) cov

deps: 
    deptry -e .venv/ -e deprecated/ -e libs/ -e docs/ -e tests/ .

compose: 
    docker compose up -d 

cov: 
    coverage html

cov-serve: 
    coverage html 
    python -m http.server htmlcov -b localhost 0

test *args:
    coverage run -m pytest -q -s \
      --doctest-modules \
      --ignore={%raw%}{{VENDOR_DIR}}{%endraw%} \
      tests/ "$@"

lint:
    ruff format --check --diff .
    ruff check .

fix *files: 
    ruff format -- "$@"
    ruff check --fix-only --show-fixes -- "$@"

type *args:
    mypy "$@"

type_app: 
    mypy app.py 

type_utils: 
    mypy utils/

type_src: 
    mypy src/

types:
    mypy .

py312 *args: 
    uv run --isolated --group test --python=3.12 pytest -q -s tests/ "$@"

py311 *args: 
    uv run --isolated --group test --python=3.11 pytest -q -s tests/ "$@"

dist:
    #!/usr/bin/env bash
    set -euo pipefail

    echo "{%raw%}{{BOLD}}{%endraw%}uv build{%raw%}{{NORMAL}}{%endraw%}"
    uv build
    echo "{%raw%}{{BOLD}}{%endraw%}running smoke tests{%raw%}{{NORMAL}}{%endraw%}"

    uv run --isolated --group test --python={{cookiecutter.py_runtime}} pytest -q -s tests/smoke_test.py
    

{% if cookiecutter.ff_type == "http" %}
ff: 
    set -a && source _local/.env && set +a && functions-framework --target=run --port=8080 --debug
deploy_gcloud: 
    gcloud functions deploy {%raw%}{{REPO}}{%endraw%} \
        --gen2 \
        --project={%raw%}$GCP_PROJECT_ID{%endraw%} \
        --region={%raw%}$GCP_REGION{%endraw%} \
        --runtime={%raw%}{{PYTHON_RUNTIME}}{%endraw%} \
        --memory=512MB \
        --trigger-http \
        --source=. \
        --entry-point=run

schedule_gcloud: 
    gcloud scheduler jobs create http {%raw%}{{REPO}}{%endraw%}-job \
        --project={%raw%}$GCP_PROJECT_ID{%endraw%} \
        --location={%raw%}$GCP_REGION{%endraw%} \
        --schedule={%raw%}{{CRON_SCHEDULE}}{%endraw%} \
        --uri=$$(gcloud functions describe {%raw%}{{REPO}}{%endraw%} \
        --gen2 \
        --region={%raw%}$GCP_REGION{%endraw%} \
        --format="value(serviceConfig.uri)") \
        --http-method=POST \
        --oidc-service-account-email={%raw%}{{SERVICE_ACCOUNT}}{%endraw%} \
        --oidc-token-audience=$$(gcloud functions describe {%raw%}{{REPO}}{%endraw%}

update_schedule_gcloud:
    export FUNCTION_URI=$(gcloud functions describe {%raw%}{{REPO}}{%endraw%} --project=$GCP_PROJECT_ID --format="value(serviceConfig.uri)")
    gcloud scheduler jobs update http {%raw%}{{JOB_NAME}}{%endraw%} \
    --project={%raw%}$GCP_PROJECT_ID{%endraw%} \
    --location={%raw%}$GCP_REGION{%endraw%} \
    --schedule={%raw%}{{CRON_SCHEDULE}}{%endraw%} \
    --uri={%raw%}$FUNCTION_URI{%endraw%} \
    --http-method=POST \
    --oidc-service-account-email={%raw%}{{SERVICE_ACCOUNT}}{%endraw%} \
    --oidc-token-audience={%raw%}$FUNCTION_URI{%endraw%}

create_cloud_scheduler_sa: 
    echo "Creating service account: {%raw%}{{SERVICE_ACCOUNT}}{%endraw%}"
    gcloud iam service-accounts create scheduler-invoker \
      --project={%raw%}$GCP_PROJECT_ID{%endraw%} \
      --display-name="Cloud Scheduler Invoker" || true

    echo "Granting Cloud Run Invoker role"
    gcloud run services add-iam-policy-binding {%raw%}{{REPO}}{%endraw%} \
      --project={%raw%}$GCP_PROJECT_ID{%endraw%} \
      --region={%raw%}$GCP_REGION{%endraw%} \
      --member=serviceAccount:{%raw%}{{SERVICE_ACCOUNT}}{%endraw%} \
      --role=roles/run.invoker

    echo "Allowing Cloud Scheduler agent to mint OIDC tokens"
    PROJECT_NUMBER=$(gcloud projects describe {%raw%}$GCP_PROJECT_ID{%endraw%} --format='value(projectNumber)'); \
    gcloud iam service-accounts add-iam-policy-binding {%raw%}{{SERVICE_ACCOUNT}}{%endraw%} \
      --project={%raw%}$GCP_PROJECT_ID{%endraw%} \
      --member=serviceAccount:$$PROJECT_NUMBER@cloudscheduler.gserviceaccount.com \
      --role=roles/iam.serviceAccountTokenCreator

    echo "Enabling APIs"
    gcloud services enable \
      cloudfunctions.googleapis.com \
      run.googleapis.com \
      iamcredentials.googleapis.com \
      cloudscheduler.googleapis.com \
      --project={%raw%}$GCP_PROJECT_ID{%endraw%}

{% endif %}